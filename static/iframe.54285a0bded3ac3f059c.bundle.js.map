{"version":3,"file":"static/iframe.54285a0bded3ac3f059c.bundle.js","sources":["webpack:///./src/index.js"],"sourcesContent":["// @flow\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\n\ntype Props = {\n    /**\n     * Function to compare props before and after update to resolve to flash or not\n     */\n    compare: (prevProps: Object, newProps: Object) => boolean,\n\n    /**\n     * Duration of \"flash\"-effect in ms\n     */\n    flashDuration: number,\n\n    /**\n     * Flash-effect className\n     */\n    flashClassName: string,\n\n    /**\n     * Flash-effect style object\n     */\n    flashStyle: Object,\n\n    /**\n     * Optional custom CSS class name\n     */\n    className?: string,\n\n    /**\n     * Optional inline style\n     */\n    style?: Object,\n};\n\ntype State = {\n    activeFlash: boolean,\n};\n\nclass FlashChange extends React.Component<Props, State> {\n    static defaultProps = {\n        flashDuration: 200,\n        flashStyle: {},\n        flashClassName: undefined,\n        compare: (prevProps, newProps) => {\n            return prevProps.value !== newProps.value;\n        },\n    };\n\n    state = {\n        activeFlash: false,\n        props: this.props,\n    };\n\n    _timer: TimeoutID;\n\n    _deactivateTimer = () => {\n        this.setState({\n            activeFlash: false,\n        });\n    };\n\n    _activateTimer() {\n        const { flashDuration } = this.props;\n\n        if (this._deactivateTimer) {\n            clearTimeout(this._deactivateTimer);\n        }\n\n        this._timer = setTimeout(this._deactivateTimer, flashDuration);\n    }\n\n    static getDerivedStateFromProps(nextProps: Object, prevState: Object) {\n        const { compare } = nextProps;\n        const result = compare(prevState.props, nextProps);\n        if (result) {\n            return { activeFlash: true, props: nextProps };\n        }\n        return { props: nextProps };\n    }\n\n    componentDidUpdate(prevProps: Object, prevState: Object) {\n        const { compare } = this.props;\n        const result = compare(prevState.props, this.state.props);\n        if (result) {\n            this._activateTimer();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this._timer) {\n            clearTimeout(this._timer);\n        }\n    }\n\n    render() {\n        const { style, className, children, flashClassName, flashStyle } = this.props;\n        const { activeFlash } = this.state;\n\n        let styleProp = { ...style };\n        if (activeFlash) {\n            styleProp = { ...styleProp, ...flashStyle };\n        }\n\n        return (\n            <div\n                {...{\n                    style: styleProp,\n                    className: classNames(className, { [flashClassName]: activeFlash }),\n                }}\n            >\n                {children}\n            </div>\n        );\n    }\n}\npolyfill(FlashChange);\n\nexport default FlashChange;\n"],"mappings":"AA0CA","sourceRoot":""}
{"version":3,"file":"static/iframe.e506e462e87e049d13f8.bundle.js","sources":["webpack:///./src/index.js"],"sourcesContent":["//@flow\n\nimport React from 'react';\nimport elementResizeDetectorMaker from 'element-resize-detector';\n\ntype Size = {\n    height: ?number,\n    width: ?number,\n};\n\ntype Props = {\n    /** Function responsible for rendering children.*/\n    //children: Size => React.Element<*>,\n    children: Size => React.Element<*>,\n\n    /** Optional custom CSS class name to attach to root AutoSizer element.  */\n    className?: string,\n\n    /** Default height to use for initial render; useful for SSR */\n    defaultHeight?: number,\n\n    /** Default width to use for initial render; useful for SSR */\n    defaultWidth?: number,\n\n    /** Disable dynamic :height property */\n    disableHeight: boolean,\n\n    /** Disable dynamic :width property */\n    disableWidth: boolean,\n\n    /** Nonce of the inlined stylesheet for Content Security Policy */\n    nonce?: string,\n\n    /** Callback to be invoked on-resize */\n    onResize: Size => void,\n\n    /** Optional inline style */\n    style: ?Object,\n};\n\ntype ResizeHandler = (element: HTMLElement, onResize: (element: HTMLElement) => void) => void;\n\ntype DetectElementResize = {\n    listenTo: ResizeHandler,\n    removeListener: ResizeHandler,\n};\n\ntype State = {\n    height: number,\n    width: number,\n};\n\nclass SizeMe extends React.Component<Props, State> {\n    static defaultProps = {\n        disableHeight: false,\n        disableWidth: false,\n        onResize: () => {},\n        style: {},\n    };\n\n    _root: ?HTMLElement;\n    _parentNode: HTMLElement;\n    _elementResizeDetector: DetectElementResize;\n\n    state = {\n        width: this.props.defaultHeight || 0,\n        height: this.props.defaultHeight || 0,\n    };\n\n    _handleResize = (element: HTMLElement) => {\n        this.setState({\n            width: element.clientWidth,\n            height: element.clientHeight,\n        });\n    };\n\n    componentDidMount() {\n        if (\n            this._root &&\n            this._root.parentNode &&\n            this._root.parentNode instanceof this._root.parentNode.ownerDocument.defaultView.HTMLElement\n        ) {\n            this._parentNode = this._root.parentNode;\n\n            this._parentNode.style.overflow = 'hidden';\n\n            this._elementResizeDetector = elementResizeDetectorMaker({\n                strategy: 'scroll',\n            });\n\n            this._elementResizeDetector.listenTo(this._parentNode, this._handleResize);\n\n            this._handleResize(this._parentNode);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this._elementResizeDetector && this._parentNode) {\n            this._elementResizeDetector.removeListener(this._parentNode, this._handleResize);\n        }\n    }\n\n    _renderContent() {\n        const { children, disableHeight, disableWidth, onResize } = this.props;\n        const { width, height } = this.state;\n\n        if (typeof children === 'function') {\n            const params = {};\n            if (!disableHeight) {\n                params.height = height;\n            }\n            if (!disableWidth) {\n                params.width = width;\n            }\n\n            onResize(params);\n\n            return children(params);\n        }\n    }\n\n    render() {\n        const { style, className } = this.props;\n\n        const containerStyle = {\n            width: 0,\n            height: 0,\n            overflow: 'visible',\n        };\n\n        return (\n            <div {...{ style: { ...containerStyle, ...style }, className }} ref={i => (this._root = i)}>\n                {this._renderContent()}\n            </div>\n        );\n    }\n}\n\nexport default SizeMe;\n"],"mappings":"AAoDA","sourceRoot":""}